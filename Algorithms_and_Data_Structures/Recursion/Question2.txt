Question 2:

Consider the following codes. It is an example of implementing and using an ArrayStack for various methods (e.g., push(), pop() and top()).
public interface Stack <E>{
	int size();
	boolean isEmpty();
	void push(E e);
	E top();
	E pop();
}

import java.util.Arrays;
/** Array-based Stack in Java */
public class ArrayStack<E> implements Stack<E> {
	  public static final int CAPACITY = 1000;    // Default array capacity
	  private E[] data;                           // generic array
	  private int t = -1;                         // index of the top element in stack
	  public ArrayStack(){this (CAPACITY);}       // constructs stack with default 
	  public ArrayStack(int capacity){            // constructs stack with given
		  data = (E[]) new Object[capacity];
	  }
	  public int size() {return(t+1);}
	  public boolean isEmpty() {return(t==-1);}
	  public void push (E e) throws IllegalStateException {
		  if (size() == data.length) throw new IllegalStateException ("Stack is full.");
		  data[++t] = e;
	  }
	  public E top() {
		  if (isEmpty()) return null;
		  return data[t];
	  }
	  public E pop() {
		  if (isEmpty()) return null;
	      	E answer = data[t];
	      	data[t] = null;
	      	t --;
	      	return answer;
	  }
  }

public class Test {
  public static void main(String[] args) {
    Stack<Integer> S = new ArrayStack<>();  // contents: ()
    S.push(5);                              // contents: (5)
    S.push(3);                              // contents: (5, 3)
    System.out.println(S.size());           // contents: (5, 3)     outputs 2
    System.out.println(S.pop());            // contents: (5)        outputs 3
    System.out.println(S.isEmpty());        // contents: (5)        outputs false
    System.out.println(S.pop());            // contents: ()         outputs 5
    System.out.println(S.isEmpty());        // contents: ()         outputs true
    System.out.println(S.pop());            // contents: ()         outputs null
    S.push(7);                              // contents: (7)
    S.push(9);                              // contents: (7, 9)
    System.out.println(S.top());            // contents: (7, 9)     outputs 9
    S.push(4);                              // contents: (7, 9, 4)
    System.out.println(S.size());           // contents: (7, 9, 4)  outputs 3
    System.out.println(S.pop());            // contents: (7, 9)     outputs 4
    S.push(6);                              // contents: (7, 9, 6)
    S.push(8);                              // contents: (7, 9, 6, 8)
    System.out.println(S.pop());            // contents: (7, 9, 6)  outputs 8	}
}
Results: 
2
3
false
5
true
null
9
3
4
8

Now suppose an initially empty stack S has performed a total of 25 push 
operations, 12 top operations, and 10 pop operations, 3 of which returned 
null to indicate that it is an empty stack. What is the current size of S?
Remember the order of all operations are arbitrary except three null cases.
Your answer is a numeric value.



Answer: 

After 25 push operations, that means that 25 elements have been added 
to the stack in total. Now, there have also been a total of 10 pop 
operations, where 3 of them have returned null. So, we have had a 
total of 7 pop operations, where 7 elements have been removed in total 
and 3 pop operations where nothing was removed. Thus if you remove 7 
elements from the total 25 elements that have been added to the stack, 
it means that we will have a current size of 18 elements. 